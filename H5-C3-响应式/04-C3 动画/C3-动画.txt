一、	X Y 轴的旋转
rotateX（） rotateY(  )

注意：
01 上面二个属性如果想看到真实的展现，应该是放置在3D空间内，但是我们经常也用在平面中取巧做一些效果。
02 小括号中接收的都是一个角度值，可以为正也可以为负在平面内我们看到的最终结果其实是一样的。
03 transform-origin: 通过这个属性我们可以定义当前转换发生时的参考点。
04 backface-visibility: hidden 该属性可以设置背对用户的画面不显示。


二、	C3的3D展示属性
01 transform-style: preserve-3d 如果需要哪个元素在做3D转换的时候能显示出3D效果，
那么我们就需要在它的父元素身上设置该属性，并且需要注意，该属性不能和 overflow:hidden 同时出现在同一个元素身上。

02 perspective : 该属性表示径深，常用的数值就是800-2000.它可以让我们的元素产生一个透视的效果（ 近大远小 ）
03 上面二个属性不是说必须同时存在。


三、	C3中的动画
在C3中实现了相应的动画功能，当我们需要某一些元素做动画的时候我们可以先定义动画，然后再直接调用动画。
同时C3中提供了二种形式的动画，我们称之为单组和多组。不论是哪种定义都需要用到关键字 @keyframes.

1.	单组动画
@keyframes 自定义动名称{
	From{
		// 这里就是动画的起始位置
	}
	To{
		// 这里就是动画的目标点
	}

}
调用动画的形式是一样的，都由 animation 来完成

2.	动画调用
Animation : 动画名称 动画时长 动画形式 动画延时 动画播放次数 动画是否反向播放

注意;
01 第一个参数是我们自已定义的动名称
02 中间三个参数和过渡属性完全一致
03 第五个参数中有一个关键字 infinite 表示无穷大即循环播放的意思
04 第六个参数默认值是 normal ，可以设置为 alternate 表示当前动画播放完之后反向播放。

3.	多组动画
@keyframes move{
	0%{  }
	.....
	100%{  }
}

四、	浏览器内核前缀
目前来说 C3 本身并没有达到完全的语法统一，所以不同的浏览器生厂商对于某一个属性可能会自已的实现方式，
在这种环境大家尽量不去占用将来标准的语法而是添加在自身浏览器的前缀做标识符来单独实现。
这样的话将来语法统一之后还可以继续使用标准语法来实现C3属性。

01 -webkit- ： chrome 内核 
02 -moz-    : ff 
03 -ms-     : 微软
04 -o-      : 欧朋浏览器
注意：
01 该写法只是在浏览器支持某一些属性前提下可以定义一些与其它浏览器不一样的功能，并不能让不支持C3的浏览器达到支持C3属性的目的。
02 在我们书写C3属性时，我们一般会先写一堆带前缀的语法，然后再写一条标准的语法【随着现在C3越来越流行，标准的事法已经被大多数浏览器所支持】






